#pragma checksum "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\Pages\Vehicles.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a0e4163ec0abce6fd300fc9a514f39b990f1c7d3"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorCRUD.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\_Imports.razor"
using BlazorCRUD;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\_Imports.razor"
using BlazorCRUD.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\Pages\Vehicles.razor"
using System.ComponentModel.DataAnnotations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\Pages\Vehicles.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\Pages\Vehicles.razor"
using BlazorCRUD.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\Pages\Vehicles.razor"
using BlazorCRUD.Contracts;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Vehicles")]
    public partial class Vehicles : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 162 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\Pages\Vehicles.razor"
       

        List<Vehicle> vehicleList;
        List<VehicleViewModel> vehicleViewModelList;
        VehicleViewModel selectedVehicleViewModel;
        string[] iconPaths;
        List<Manufacturer> manufacturerList;
        List<Category> categoryList;
        string editMessage;


        private async Task ResetUI()
        {
            vehicleList = await vehiclesManager.ListAll();
            vehicleViewModelList = GetVehicleViewModelList(vehicleList, manufacturerList, categoryList);
            selectedVehicleViewModel = null;
            editMessage = string.Empty;
        }

        protected override async Task OnInitializedAsync()
        {
            iconPaths = await categoriesManager.GetIconPaths();
            manufacturerList = await manufacturersManager.ListAll();
            categoryList = await categoriesManager.ListAll();
            await ResetUI();
        }

        protected async Task DeleteVehicle(int id)
        {
            await vehiclesManager.Delete(id);
            vehicleList = await vehiclesManager.ListAll();
            vehicleViewModelList = GetVehicleViewModelList(vehicleList, manufacturerList, categoryList);
        }

        protected async Task UpdateVehicle(VehicleViewModel vehicleViewModel)
        {
            Vehicle vehicle = new Vehicle
            {
                ID = vehicleViewModel.ID,
                OwnerName = vehicleViewModel.OwnerName,
                ManufacturerId = vehicleViewModel.ManufacturerId,
                YearOfManufactue = vehicleViewModel.YearOfManufactue,
                WeightInKilo = vehicleViewModel.WeightInKilo
            };
            if (vehicle.ID > 0)
            {
                await vehiclesManager.Update(vehicle);
            }
            else
            {
                await vehiclesManager.Create(vehicle);
            }
            await ResetUI();
        }

        protected void AddVehicle()
        {
            selectedVehicleViewModel = new VehicleViewModel
            {
                ManufacturerId = manufacturerList.Min(m => m.ID),
                YearOfManufactue = DateTime.Now.Year,
                WeightInKilo = 0
            };
            editMessage = "New vehicle";
    }

    protected void EditVehicle(VehicleViewModel vehicleViewModel)
    {
        selectedVehicleViewModel = vehicleViewModel;
        editMessage = string.Concat("Vehicle Id = ", vehicleViewModel.ID);
    }

    protected async Task Cancel()
    {
        await ResetUI();
    }

    protected async void HandleValidSubmit()
    {
        if (selectedVehicleViewModel != null)
        {
            await UpdateVehicle(selectedVehicleViewModel);
        }
    }


    private bool isSortedAscending;
    private string activeSortColumn;

    private void SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            vehicleViewModelList = vehicleViewModelList.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            isSortedAscending = true;
            activeSortColumn = columnName;

        }
        else
        {
            if (isSortedAscending)
            {
                vehicleViewModelList = vehicleViewModelList.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                vehicleViewModelList = vehicleViewModelList.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }

            isSortedAscending = !isSortedAscending;
        }
    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    private List<VehicleViewModel> GetVehicleViewModelList(List<Vehicle> vehicleList, List<Manufacturer> manufacturerList, List<Category> categoryList)
    {
        List<VehicleViewModel> vehicleViewModelList = new List<VehicleViewModel>();
        foreach (var vehicle in vehicleList)
        {
            vehicleViewModelList.Add(new VehicleViewModel
            {
                ID = vehicle.ID,
                OwnerName = vehicle.OwnerName,
                ManufacturerId = vehicle.ManufacturerId,
                YearOfManufactue = vehicle.YearOfManufactue,
                WeightInKilo = vehicle.WeightInKilo,

                ManufacturerName = manufacturerList.FirstOrDefault(m => m.ID == vehicle.ManufacturerId) == null ?
                                        string.Empty :
                                        manufacturerList.FirstOrDefault(m => m.ID == vehicle.ManufacturerId).Name,
                IconPath = categoryList.FirstOrDefault(c => vehicle.WeightInKilo >= c.WeightMin && vehicle.WeightInKilo <= c.WeightMax) == null ?
                            string.Empty :
                            categoryList.FirstOrDefault(c => vehicle.WeightInKilo >= c.WeightMin && vehicle.WeightInKilo <= c.WeightMax).IconPath
            }); ; ;
        }
        return vehicleViewModelList;
    }

    protected class VehicleViewModel
    {
        public int ID { get; set; }

        [Required]
        [StringLength(250, ErrorMessage = "OwnerName max length is 250.")]
        public string OwnerName { get; set; }

        [Required]
        public int ManufacturerId { get; set; }

        [Required]
        public int YearOfManufactue { get; set; }

        [Required]
        [Range(0, 99999, ErrorMessage = "WeightInKilo must be between 0 and 99999.")]
        public decimal WeightInKilo { get; set; }

        public string ManufacturerName { get; set; }
        public string IconPath { get; set; }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IManufacturersManager manufacturersManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IVehiclesManager vehiclesManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICategoriesManager categoriesManager { get; set; }
    }
}
#pragma warning restore 1591
