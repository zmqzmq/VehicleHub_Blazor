#pragma checksum "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\Pages\Categories.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "eb321433ffd173661525a2c873be7f99ce13568d"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorCRUD.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\_Imports.razor"
using BlazorCRUD;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\_Imports.razor"
using BlazorCRUD.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\Pages\Categories.razor"
using System.ComponentModel.DataAnnotations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\Pages\Categories.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\Pages\Categories.razor"
using BlazorCRUD.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\Pages\Categories.razor"
using BlazorCRUD.Contracts;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Categories")]
    public partial class Categories : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 158 "D:\zmq\GitHub\VehicleHub_Blazor\BlazorCRUD\Pages\Categories.razor"
       
    List<CategoryViewModel> categoryViewModelList;
    CategoryViewModel selectedCategoryViewModel;
    List<Category> categoryList;
    string[] iconPaths;
    string editMessage;
    string weightRangeValidateResult;
    
    private async Task ResetUI()
    {
        categoryList = await categoriesManager.ListAll();
        categoryViewModelList = GetCategoryViewModelList(categoryList);
        selectedCategoryViewModel = null;
        editMessage = string.Empty;
        weightRangeValidateResult = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        iconPaths = await categoriesManager.GetIconPaths();
        await ResetUI();
    }

    protected async Task DeleteCategory(int id)
    {
        await categoriesManager.Delete(id);
        categoryList = await categoriesManager.ListAll();
        categoryViewModelList = GetCategoryViewModelList(categoryList);

    }

    protected async Task UpdateCategory(CategoryViewModel categoryViewModel)
    {
        Category category = new Category
        {
            ID = categoryViewModel.ID,
            Name = categoryViewModel.Name,
            WeightMin = categoryViewModel.WeightMin,
            WeightMax = categoryViewModel.WeightMax,
            IconPath = categoryViewModel.IconPath,
        };
        if (category.ID > 0)
        {
            await categoriesManager.Update(category);
        }
        else
        {
            await categoriesManager.Create(category);
        }
        await ResetUI();
    }

    protected void AddCategory()
    {
        selectedCategoryViewModel = new CategoryViewModel
        {
            IconPath = iconPaths.Length > 0 ? iconPaths[0] : string.Empty,
            WeightEditable = true
        };
        editMessage = "New Category";
        weightRangeValidateResult = string.Empty;
    }

    protected void EditCategory(CategoryViewModel categoryViewModel)
    {
        selectedCategoryViewModel = categoryViewModel;
        editMessage = string.Concat("Categorgy Id = ", categoryViewModel.ID);
        weightRangeValidateResult = string.Empty;
    }

    protected async Task Cancel()
    {
        await ResetUI();
    }

    protected async void HandleValidSubmit()
    {
        if (selectedCategoryViewModel != null)
        {
            //validate WeightMin and WeightMax
            weightRangeValidateResult = await categoriesManager.ValidateCategoryWeightRange(new Category
            {
                ID = selectedCategoryViewModel.ID,
                Name = selectedCategoryViewModel.Name,
                WeightMin = selectedCategoryViewModel.WeightMin,
                WeightMax = selectedCategoryViewModel.WeightMax,
                IconPath = selectedCategoryViewModel.IconPath,
            }, categoryList);

            if (weightRangeValidateResult == string.Empty)
            {
                await UpdateCategory(selectedCategoryViewModel);
            }
        }
    }

    private bool isSortedAscending;
    private string activeSortColumn;

    private void SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            categoryViewModelList = categoryViewModelList.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            isSortedAscending = true;
            activeSortColumn = columnName;

        }
        else
        {
            if (isSortedAscending)
            {
                categoryViewModelList = categoryViewModelList.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                categoryViewModelList = categoryViewModelList.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }

            isSortedAscending = !isSortedAscending;
        }
    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    private List<CategoryViewModel> GetCategoryViewModelList(List<Category> CategoryList)
    {
        List<CategoryViewModel> CategoryViewModelList = new List<CategoryViewModel>();
        foreach (var category in CategoryList)
        {
            CategoryViewModelList.Add(new CategoryViewModel
            {
                ID = category.ID,
                Name = category.Name,
                WeightMin = category.WeightMin,
                WeightMax = category.WeightMax,
                IconPath = category.IconPath,

                WeightEditable = category.WeightMin == categoryList.Min(c => c.WeightMin) || category.WeightMax == categoryList.Max(c => c.WeightMax)
            });
        }
        return CategoryViewModelList;
    }

    protected class CategoryViewModel
    {
        public int ID { get; set; }

        [Required]
        [StringLength(250, ErrorMessage = "Name max length is 250.")]
        public string Name { get; set; }

        [Required]
        [Range(0, 99999, ErrorMessage = "WeightMin must be between 0 and 99999.")]
        public int WeightMin { get; set; }

        [Required]
        [Range(0, 99999, ErrorMessage = "WeightMax must be between 0 and 99999.")]
        public int WeightMax { get; set; }
        public string IconPath { get; set; }

        public bool WeightEditable { get; set; }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICategoriesManager categoriesManager { get; set; }
    }
}
#pragma warning restore 1591
